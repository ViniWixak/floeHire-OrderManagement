services:
  frontend:
      build:
        context: ./frontend
        dockerfile: Dockerfile
      ports:
        - "3000:5174"
      depends_on:
        - backend

  backend:
      build:
        context: .
        dockerfile: Backend/OrderManagement.API/Dockerfile
      ports:
        - "5000:8080"
      environment:
        - ASPNETCORE_ENVIRONMENT=Development
        - MongoDB__ConnectionString=mongodb://mongo:27017
        - SqlServer__ConnectionString=Server=sqlserver;Database=OrderDb;User Id=sa;Password=Password1234;Encrypt=True;TrustServerCertificate=False;
      depends_on:
        - mongodb
        - sqlserver
     
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    restart: always
    environment:
      SA_PASSWORD: "Password1234"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "Password1234", "-Q", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - sql_data:/var/opt/mssql

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mongo_data:/data/db

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017

volumes:
  sql_data:
  mongo_data:
